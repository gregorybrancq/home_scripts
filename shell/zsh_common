
####################################
# Prompt et d√©finition des touches #
####################################

# Prompt couleur (la couleur n'est pas la m√™me pour le root et
# pour les simples utilisateurs)
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
if [ "`id -u`" -eq 0 ]; then
    # ROOT
    export PS1="%{[34;1m%}[%D{%d-%m} %*] %{[33m%}%n%{[33m%}@%{[33m%}%m %{[36m%}%~ %{[33m%}>%{[0m%} "
else
    # USER
    export PS1="%{[34;1m%}[%D{%d-%m} %*] %{[35m%}%n%{[35m%}@%{[35m%}%m %{[36m%}%~ %{[33m%}>%{[0m%} "
    #export PS1="%{[36;1m%}%T %{[31m%}%n%{[33m%}@%{[37m%}%m %{[32m%}%~ %{[33m%}%#%{[0m%} "
fi
# Set up the prompt
autoload -Uz promptinit
promptinit
#prompt adam1



##########################
# D√©finition des touches #
##########################

# Exemple : ma touche HOME, cf  man termcap, est codifiee K1 (upper left
# key  on keyboard)  dans le  /etc/termcap.  En me  referant a  l'entree
# correspondant a mon terminal (par exemple 'linux') dans ce fichier, je
# lis :  K1=\E[1~, c'est la sequence  de caracteres qui sera  envoyee au
# shell. La commande bindkey dit simplement au shell : a chaque fois que
# tu rencontres telle sequence de caractere, tu dois faire telle action.
# La liste des actions est disponible dans "man zshzle".
#
# Astuce, pour conna√Ætre les raccourcis clavier de votre terminal, taper la commande :
# cat -v

# Use emacs keybindings even if our EDITOR is set to vi
#bindkey -e

# Correspondance touches-fonction
bindkey ''    beginning-of-line       # [Ctrl-A] Home
bindkey "\e[1~" beginning-of-line       # [Esc
bindkey "\e[H"  beginning-of-line
bindkey ''    end-of-line             # End
bindkey "\e[4~" end-of-line
bindkey "\e[F"  end-of-line
bindkey ''    delete-char             # Del
bindkey '[2~' overwrite-mode          # Insert
bindkey '[3~' delete-char             # Suppr
bindkey '[5~' history-search-backward # PgUp
bindkey '[6~' history-search-forward  # PgDn
bindkey 'p'   history-search-backward # alt+p
bindkey 'P'   history-search-forward  # alt+P
bindkey 'b'   backward-word           # alt+b
bindkey 'f'   forward-word            # alt+f

bindkey '\e^?'  backward-delete-word    # [Esc+Backspace]

# Prise en charge des touches [d√©but], [fin] et autres
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# by default: export WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>'
# we take out the slash, period, angle brackets, dash here.
export WORDCHARS='*?_[]~=&;!#$%^(){}'

# Titre de la fen√™tre d'un xterm
case $TERM in
    xterm*)
        if [ -z "$SEQUANS_VPN" ]
        then
            precmd () {print -Pn "\e]0;%n@%m: %~\a"}
        fi
        ;;
esac


########################################
# Options de zsh (cf 'man zshoptions') #
########################################

# Je ne veux JAMAIS de beeps
unsetopt beep
unsetopt hist_beep
unsetopt list_beep
# >| doit √™tre utilis√©s pour pouvoir √©craser un fichier d√©j√† existant ;
# le fichier ne sera pas √©cras√© avec '>'
unsetopt clobber
# Ctrl+D est √©quivalent √† 'logout'
unsetopt ignore_eof
# Affiche le code de sortie si diff√©rent de '0'
setopt print_exit_value
# Demande confirmation pour 'rm *'
unsetopt rm_star_silent
# Correction orthographique des commandes
# D√©sactiv√© car, contrairement √† ce que dit le "man", il essaye de
# corriger les commandes avant de les hasher
#setopt correct
# Si on utilise des jokers dans une liste d'arguments, retire les jokers
# qui ne correspondent √† rien au lieu de donner une erreur
setopt nullglob
# This 'rehash' can be set to happen automatically
setopt nohashdirs

# Sch√©mas de compl√©tion

# - Sch√©ma A :
# 1√®re tabulation : compl√®te jusqu'au bout de la partie commune
# 2√®me tabulation : propose une liste de choix
# 3√®me tabulation : compl√®te avec le 1er item de la liste
# 4√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# -> c'est le sch√©ma de compl√©tion par d√©faut de zsh.

# Sch√©ma B :
# 1√®re tabulation : propose une liste de choix et compl√®te avec le 1er item
#                   de la liste
# 2√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# Si vous voulez ce sch√©ma, d√©commentez la ligne suivante :
#setopt menu_complete

# Sch√©ma C :
# 1√®re tabulation : compl√®te jusqu'au bout de la partie commune et
#                   propose une liste de choix
# 2√®me tabulation : compl√®te avec le 1er item de la liste
# 3√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# Ce sch√©ma est le meilleur √† mon go√ªt !
# Si vous voulez ce sch√©ma, d√©commentez la ligne suivante :
#unsetopt list_ambiguous
# (Merci √† Youri van Rietschoten de m'avoir donn√© l'info !)

# Options de compl√©tion
# Quand le dernier caract√®re d'une compl√©tion est '/' et que l'on
# tape 'espace' apr√®s, le '/' est effac√©
setopt auto_remove_slash
# Ne fait pas de compl√©tion sur les fichiers et r√©pertoires cach√©s
unsetopt glob_dots

# Traite les liens symboliques comme il faut
setopt chase_links

# Si la commande est invalide mais correspond au nom d'un sous-r√©pertoire
# ex√©cuter 'cd sous-r√©pertoire'
setopt auto_cd
# L'ex√©cution de "cd" met le r√©pertoire d'o√π l'on vient sur la pile
setopt auto_pushd
# Ignore les doublons dans la pile
setopt pushd_ignore_dups
# N'affiche pas la pile apr√®s un "pushd" ou "popd"
setopt pushd_silent
# "pushd" sans argument = "pushd $HOME"
setopt pushd_to_home

# Les jobs qui tournent en t√¢che de fond sont nic√© √† '0'
unsetopt bg_nice
# N'envoie pas de "HUP" aux jobs qui tourent quand le shell se ferme
unsetopt hup


############################################
# Param√®tres de l'historique des commandes #
############################################

# Nombre d'entr√©es dans l'historique
export HISTORY=1000
export SAVEHIST=1000

# Fichier o√π est stock√© l'historique
export HISTFILE=$HOME/.zsh_history

# Quand l'utilisateur commence sa commande par '!' pour faire de la
# compl√©tion historique, il n'ex√©cute pas la commande imm√©diatement
# mais il √©crit la commande dans le prompt
setopt hist_verify

# Ajoute l'historique √† la fin de l'ancien fichier
#setopt append_history

# Chaque ligne est ajout√©e dans l'historique √† mesure qu'elle est tap√©e
setopt inc_append_history

# Ne stocke pas une ligne dans l'historique si elle  est identique √† la
# pr√©c√©dente
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt sharehistory
setopt hist_ignore_dups

# Supprime les  r√©p√©titions dans le fichier  d'historique, ne conservant
# que la derni√®re occurrence ajout√©e
#setopt hist_ignore_all_dups

# Supprime les  r√©p√©titions dans l'historique lorsqu'il  est plein, mais
# pas avant
setopt hist_expire_dups_first

# N'enregistre  pas plus d'une fois  une m√™me ligne, quelles  que soient
# les options fix√©es pour la session courante
#setopt hist_save_no_dups

# La recherche dans  l'historique avec l'√©diteur de commandes  de zsh ne
# montre  pas  une m√™me  ligne  plus  d'une fois,  m√™me  si  elle a  √©t√©
# enregistr√©e
setopt hist_find_no_dups


########################################
# Compl√©tion des options des commandes #
########################################

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' max-errors 3 numeric
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

# Kill
zstyle ':completion:*:processes' command 'ps -ax'
zstyle ':completion:*:processes-names' command 'ps -aeo comm='
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:killall:*:processes-names' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:*:killall:*' menu yes select

# Pour √©viter de proposer un √©l√©ment d√©j√† pr√©sent lors d'un cp, mv ou rm
zstyle ':completion:*:rm:*' ignore-line yes
zstyle ':completion:*:mv:*' ignore-line yes
zstyle ':completion:*:cp:*' ignore-line yes

autoload -Uz compinit
compinit

# Le logiciel autojump <https://github.com/joelthelion/autojump> fournit un
# moyen d'acc√©der rapidement aux r√©pertoires fr√©quemment visit√©s, en tapant
# simplement ¬´¬†j un_bout_du_nom_du_r√©pertoire¬†¬ª. Si vous souhaitez l'utiliser,
# installez le paquet autojump et d√©commentez la ligne suivante¬†:
#. /usr/share/autojump/autojump.sh
